import java.io.*;
import java.util.*;

/** 
&& 노트북 이슈로 잠시 여기에 올림. 이후에는 다른 곳에 올릴 예정

마법의 숲 탐색
@author 조민주

* 골렘은 십자 모양의 다섯칸 차지.
* 입구는 자유, 출구는 상하좌우 중 정해진 곳으로만 사용 가능
* 중앙이 c[i]일 경우에 아래로 내려오기 시작
* 초기 골렘의 출구는 d[i]

1. 골렘을 아래로 한 칸 이동
2. 골렘이 아래로 이동이 불가능할 경우
    2-1. 왼쪽으로 한칸 이동 후 아래로 이동. 출구는 반시계방향으로 회전
    2-2. 오른쪽으로 한칸 이동 후 아래로 이동. 출구는 시계방향으로 회전
3. 이동 불가능한 가장 남쪽에 도달한 경우, 상하좌우 인접한 칸으로 이동 가능
    3-1. 이때 위치가 출구가 다른 골렘과 인접할 경우 해당 골렘으로 이동 가능
4. 모든 칸 중 가장 남쪽 칸으로 이동 후 종료
    4-1. 이때 정령의 위치가 최종 위치
5. 골렘의 몸 일부가 숲을 벗어난 경우
    5-1. 숲을 완전히 비우고 새롭게 숲 탐색 시작
    5-2. 이 경우 정령이 도달하는 최종 위치를 답에 포함 X


[입력]
숲의 크기 rowSize(R), colSize(C), 정령의 수 spiritCount(K)
골렘이 출발하는 열 golemStart[] (c[i]), 골렘의 출구 방향 exitDirect[] (d[i])

**/

public class Main {

    public static BufferedReader br;
    public static StringBuilder sb;
    public static StringTokenizer st;

    public static final int EXIT = 1001;
    public static int rowSize, colSize, spiritCount;
    public static int[][] map;
    public static int[][] exit;
    // 정령의 방향이랑 위치
    public static Spirit[] spirit;

    public static int result;

    // 북, 동, 남, 서
    public static int[] dx = {-1, 0, 1, 0};
    public static int[] dy = {0, 1, 0, -1};

    public static class Spirit{
        int x, y, dir, idx;

        Spirit(int x, int y, int dir, int idx){
            this.x = x;
            this.y = y;
            this.dir = dir;
            this.idx = idx;
        }
    }

    public static void main(String[] args) throws IOException{
        br = new BufferedReader(new InputStreamReader(System.in));
        sb = new StringBuilder();
        st = new StringTokenizer(br.readLine().trim());

        rowSize = Integer.parseInt(st.nextToken());
        colSize = Integer.parseInt(st.nextToken());
        spiritCount = Integer.parseInt(st.nextToken());

        map = new int[rowSize+1][colSize+1];
        exit = new int[rowSize+1][colSize+1];

        spirit = new Spirit[spiritCount+1];

        for(int idx = 0; idx < spiritCount; idx++){
            st = new StringTokenizer(br.readLine().trim());
            int y = Integer.parseInt(st.nextToken());
            int direct = Integer.parseInt(st.nextToken());
            spirit[idx+1] = new Spirit(-1, y, direct, idx+1);
        }

        solve();
    }

    public static void solve(){
        for(int idx = 1; idx <= spiritCount; idx++){
            Spirit currentS = spirit[idx];
            // 이동할 수 없을 때까지 계속 반복
            while(true){
                boolean isMove = false;

                // 남쪽으로 이동
                if(south(currentS, "")){
                    isMove = true;
                }
                // 서쪽으로 이동
                else if(west(currentS)){
                    isMove = true;
                }
                // 동쪽으로 이동
                else if(east(currentS)){
                    isMove = true;
                }
                // 더 이상 이동 못할 경우
                if(!isMove){
                    break;
                }
            }

            // 요정이 맵 안에 있고 움직이지 못하는 경우 -> 계산하기
            if(isRange(currentS)){
                addSpirit(currentS);
            }
            // 맵 밖에 있는 경우 -> 맵 초기화
            else{
                initMap();
            }
        }
        sb.append(result);
    }

    // 남쪽으로 이동
    public static boolean south(Spirit current, String cmd){
        int curX = current.x;
        int curY = current.y;

        // 완전 남쪽에 도달한 경우
        if(curX == rowSize-1){
            return false;
        }

        if(curX == -1){
            if(map[curX + dx[2]*2][curY] == 0){
                current.x++;
                return true;
            }
            return false;
        }

        // 서쪽으로 이동했다가 아래로 내려가는 경우
        if(cmd.equals("west")){
            if(map[curX+dx[2]*2][curY] == 0 && map[curX+1][curY-1] == 0){
                return true;
            }
            return false;
        }

        // 동쪽으로 이동했다가 아래로 내려가는 경우
        if(cmd.equals("east")){
            if(map[curX+dx[2]*2][curY] == 0 && map[curX+1][curY+1] == 0){
                return true;
            }
            return false;
        }

        // 전부 확인
        if(map[curX+dx[2]*2][curY] == 0 && map[curX+1][curY-1] == 0 && map[curX+1][curY+1] == 0){
            current.x++;
            return true;
        }
        return false;
    }

    // 서쪽으로 이동
    public static boolean west(Spirit current){
        int curX = current.x;
        int curY = current.y;

        // 가장 왼쪽 칸이 1인 경우
        if(curY == 2){
            return false;
        }

        if(curX == -1){
            current.x++;
            current.y--;

            // 반시계 이동
            current.dir = countercolckwise(current.dir);
            return true;
        }

        if((curX <= -1 || map[curX][curY+dy[3]*2] == 0) 
            && (curX <= 0 || map[curX-1][curY-1] == 0) 
            && (map[curX+1][curY-1] == 0)){

            // 아래 이동이 가능한 경우
            if(south(new Spirit(curX, curY-1, current.dir, current.idx), "west")){
                current.x++;
                current.y--;
                current.dir = countercolckwise(current.dir);
                return true;
            }else{
                return false;
            }
        }
        return false;
    }

    // 동쪽으로 이동
    public static boolean east(Spirit current){
        int curX = current.x;
        int curY = current.y;

        // 중심칸이 colSize-1인 경우
        if(curY == colSize-1){
            return false;
        }

        if(curX == -1){
            current.x++;
            current.y++;

            // 시계 이동
            current.dir = colckwise(current.dir);
            return true;
        }

        if((curX <= -1 || map[curX][curY+dy[1]*2] == 0) 
            && (curX <= 0 || map[curX-1][curY+1] == 0) 
            && (map[curX+1][curY+1] == 0)){

            // 아래 이동이 가능한 경우
            if(south(new Spirit(curX, curY+1, current.dir, current.idx), "east")){
                current.x++;
                current.y++;
                current.dir = colckwise(current.dir);
                return true;
            }else{
                return false;
            }
        }
        return false;
    }

    public static void addSpirit(Spirit current){
        // 원래 좌표
        int curX = current.x;
        int curY = current.y;

        for(int d = 0; d < 4; d++){
            int nx = curX + dx[d];
            int ny = curY + dy[d];
            map[nx][ny] = current.idx;
            if(d == current.dir){
                // 출구인 거 표시해주기
                map[nx][ny] = EXIT;
                exit[nx][ny] = current.idx;
            }
        }

        map[curX][curY] = current.idx;

        // 내리는 방향이랑 좌표
        int direct = current.dir;
        int exitX = curX + dx[current.x];
        int exitY = curY + dy[current.y];

        int maxRow = curX+1;

        Queue<int[]> que = new ArrayDeque<>();
        boolean[][] visited = new boolean[rowSize+1][colSize+1];
        visited[exitX][exitY] = true;
        que.add(new int[] {exitX, exitY, EXIT});

        while(!que.isEmpty()){
            int[] pop = que.poll();

            maxRow = Math.max(maxRow, pop[0]);

            for(int d = 0; d < 4; d++){
                int nx = pop[0] + dx[d];
                int ny = pop[1] + dy[d];

                // 맵 나간 경우
                if(nx < 1 || ny < 1 || nx > rowSize || ny > colSize){
                    continue;
                }

                // 이미 방문 또는 빈 칸인 경우
                if(visited[nx][ny] || map[nx][ny] == 0){
                    continue;
                }

                // 출구였다면 인접한 곳으로 이동 가능
                if(pop[2] == EXIT){
                    visited[nx][ny] = true;
                    que.add(new int[] {nx, ny, map[nx][ny]});
                }else if(map[nx][ny] == EXIT){
                    // 내부에서 이동한 경우
                    if(pop[2] == EXIT){
                        visited[nx][ny] = true;
                        que.add(new int[] {nx, ny, map[nx][ny]});
                    }   
                }else if(pop[2] == map[nx][ny]){
                    visited[nx][ny] = true;
                    que.add(new int[] {nx, ny, map[nx][ny]});
                }
            }
        }

        result += maxRow;
    }

    public static void initMap(){
        for(int i = 0; i <= rowSize; i++){
            for(int j = 0; j <= colSize; j++){
                map[i][j] = 0;
                exit[i][j] = 0;
            }
        }
    }

    // 범위 내인지 확인
    public static boolean isRange(Spirit current){
        if((current.x >= 2 && current.x <= rowSize-1) && (current.y >= 2 && current.y <= colSize-1)){
            return true;
        }
        return false;
    }

    // 시계방향이동
    public static int colckwise(int direct){
        if(direct == 3) return 0;
        else    return direct+1;
    }

    // 반시계방향이동
    public static int countercolckwise(int direct){
        if(direct == 0) return 3;
        else    return direct-1;
    }
}
 
